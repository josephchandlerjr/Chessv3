src\com\chessv3\ChessModelImpl2.java:302: error: cannot find symbol
						whiteQueensRookHasMoved = true;
						^
  symbol:   variable whiteQueensRookHasMoved
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:308: error: cannot find symbol
						whiteKingssRookHasMoved = true;
						^
  symbol:   variable whiteKingssRookHasMoved
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:327: error: cannot find symbol
						blackKingssRookHasMoved = true;
						^
  symbol:   variable blackKingssRookHasMoved
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:333: error: cannot find symbol
		latMoveType = moveType;
		^
  symbol:   variable latMoveType
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:334: error: int cannot be dereferenced
		lastMove = new int[]{fromSquare[0].fromSquare[1],toSquare[0],toSquare[1]}; 
		                                  ^
src\com\chessv3\ChessModelImpl2.java:372: error: constant expression required
		case NORMAL: result = defineNormalMove(fromSquare, toSquare, attacker, attacked, attackerColor);
		     ^
src\com\chessv3\ChessModelImpl2.java:374: error: constant expression required
		case ENPASSANT: result = defineEnPassant(fromSquare, toSquare, attacker, attacked, attackerColor);
		     ^
src\com\chessv3\ChessModelImpl2.java:376: error: constant expression required
	 	case TWOROWPAWN: result = defineTwoRowPawn(fromSquare, toSquare, attacker, attacked, attackerColor);
	 	     ^
src\com\chessv3\ChessModelImpl2.java:378: error: constant expression required
	        case CASTLEQUEEN: result = defineCastleQueen(fromSquare, toSquare, attacker, attacked, attackerColor);
	             ^
src\com\chessv3\ChessModelImpl2.java:380: error: constant expression required
	        case CASTLEKING: result = defineCastleKing(fromSquare, toSquare, attacker, attacked, attackerColor);
	             ^
src\com\chessv3\ChessModelImpl2.java:391: error: cannot find symbol
		int color = getColor(attacker);
		            ^
  symbol:   method getColor(int)
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:394: error: cannot find symbol
		if (isRook(attacker)){ isvalid = isValidRookMove(fromSquare, toSquare);}
		                       ^
  symbol:   variable isvalid
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:395: error: cannot find symbol
		if (isKnight(attacker)){ isvalid = isValidKnightMove(fromSquare, toSquare);}
		                         ^
  symbol:   variable isvalid
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:396: error: cannot find symbol
		if (isBishop(attacker)){ isvalid = isValidBishopMove(fromSquare, toSquare);}
		                         ^
  symbol:   variable isvalid
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:397: error: cannot find symbol
		if (isQueen(attacker)){ isvalid = isValidQueenMove(fromSquare, toSquare);}
		                        ^
  symbol:   variable isvalid
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:398: error: cannot find symbol
		if (isKing(attacker)){ isvalid = isValidKingMove(fromSquare, toSquare);}		
		                       ^
  symbol:   variable isvalid
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:425: error: cannot find symbol
		if (lastMoveType == TWOROWPAWN     &&
		    ^
  symbol:   variable lastMoveType
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:440: error: cannot find symbol
		int direction = piece.getDirection();
		                ^
  symbol:   variable piece
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:454: error: cannot find symbol
		   !piecesBetween(from,to)    &&
		                  ^
  symbol:   variable from
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:454: error: cannot find symbol
		   !piecesBetween(from,to)    &&
		                       ^
  symbol:   variable to
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:455: error: cannot find symbol
		   !scoreSheet.contains(from)){
		                        ^
  symbol:   variable from
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:455: error: cannot find symbol
		   !scoreSheet.contains(from)){
		    ^
  symbol:   variable scoreSheet
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:497: error: cannot find symbol
		if(!canCastleQueenSide(attackerColor))
		    ^
  symbol:   method canCastleQueenSide(int)
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:580: error: cannot find symbol
					if (defineNormalMove(fromLocation, toSquare, attacker, 
					                                   ^
  symbol:   variable toSquare
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:580: error: cannot find symbol
					if (defineNormalMove(fromLocation, toSquare, attacker, 
					                                             ^
  symbol:   variable attacker
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:581: error: cannot find symbol
		                            attacked, attackerColor) != null){
		                            ^
  symbol:   variable attacked
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:581: error: cannot find symbol
		                            attacked, attackerColor) != null){
		                                      ^
  symbol:   variable attackerColor
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:588: error: variable result is already defined in method attackersOfLocation(int[],int)
		int[][] result = new int[resultAsList.size()/2][2]; 
		        ^
src\com\chessv3\ChessModelImpl2.java:591: error: incompatible types
			result[index] = new int[]{resultAsList.get(i), resultAsList.get(i+1)};
			                ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:594: error: incompatible types
		return result;
		       ^
  required: int[][]
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:599: error: incompatible types
		for(int row : board){
		              ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:600: error: for-each not applicable to expression type
			for (int col : row){
			               ^
  required: array or java.lang.Iterable
  found:    int
src\com\chessv3\ChessModelImpl2.java:636: error: cannot find symbol
		return sameColumn(sqr1,sqr2) && 
		                  ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:637: error: cannot find symbol
		       sameColumn(sqr1,sqr3) && 
		                  ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:641: error: cannot find symbol
		return sameRow(sqr1,sqr2) && 
		               ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:642: error: cannot find symbol
		       sameRow(sqr1,sqr3) && 
		               ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:664: error: cannot find symbol
		return sameForwardDiagonal(sq1,sq2) || sameBackDiagonal(sq1,sq2);
		                               ^
  symbol:   variable sq2
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:664: error: cannot find symbol
		return sameForwardDiagonal(sq1,sq2) || sameBackDiagonal(sq1,sq2);
		                                                            ^
  symbol:   variable sq2
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:675: error: cannot find symbol
		return sameBackDiagonal(sqr1,sqr2) && 
		                        ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:676: error: cannot find symbol
		       sameBackDiagonal(sqr1,sqr3) && 
		                        ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:687: error: cannot find symbol
		return sameForwardDiagonal(sqr1,sqr2) && 
		                           ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:688: error: cannot find symbol
		       sameForwardDiagonal(sqr1,sqr3) && 
		                           ^
  symbol:   variable sqr1
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:710: error: incompatible types
		int king = findKing(kingColor);
		                   ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:711: error: illegal initializer for int
		int location = {row, col};
		               ^
src\com\chessv3\ChessModelImpl2.java:712: error: cannot find symbol
                if (!samColumn(king, location))
                     ^
  symbol:   method samColumn(int,int)
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:721: error: method isBetween in class ChessModelImpl2 cannot be applied to given types;
			if(isRook(attacker) || isQueen(attacker) && isBetween(location, king, attacker))
			                                            ^
  required: int[],int[],int[]
  found: int,int,int
  reason: actual argument int cannot be converted to int[] by method invocation conversion
src\com\chessv3\ChessModelImpl2.java:727: error: incompatible types
		int king = findKing(kingColor);
		                   ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:728: error: illegal initializer for int
		int location = {row, col};
		               ^
src\com\chessv3\ChessModelImpl2.java:739: error: method isBetween in class ChessModelImpl2 cannot be applied to given types;
			if(isRook(attacker) || isQueen(attacker) && isBetween(location, king, attacker))
			                                            ^
  required: int[],int[],int[]
  found: int,int,int
  reason: actual argument int cannot be converted to int[] by method invocation conversion
src\com\chessv3\ChessModelImpl2.java:745: error: incompatible types
		int king = findKing(kingColor);
		                   ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:746: error: illegal initializer for int
		int location = {row, col};
		               ^
src\com\chessv3\ChessModelImpl2.java:747: error: no suitable method found for sameBackDiagonal(int,int)
		if(!sameBackDiagonal(king,location))
		    ^
    method ChessModelImpl2.sameBackDiagonal(int,int,int,int) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameBackDiagonal(int[],int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameBackDiagonal(int[],int[]) is not applicable
      (actual argument int cannot be converted to int[] by method invocation conversion)
src\com\chessv3\ChessModelImpl2.java:758: error: no suitable method found for sameBackDiagonal(int,int[])
				if(!sameBackDiagonal(location,attackerLocation))
				    ^
    method ChessModelImpl2.sameBackDiagonal(int,int,int,int) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameBackDiagonal(int[],int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameBackDiagonal(int[],int[]) is not applicable
      (actual argument int cannot be converted to int[] by method invocation conversion)
src\com\chessv3\ChessModelImpl2.java:760: error: method isBetween in class ChessModelImpl2 cannot be applied to given types;
				if(isBetween(location, king, attackerLocation))
				   ^
  required: int[],int[],int[]
  found: int,int,int[]
  reason: actual argument int cannot be converted to int[] by method invocation conversion
src\com\chessv3\ChessModelImpl2.java:767: error: incompatible types
		int king = findKing(kingColor);
		                   ^
  required: int
  found:    int[]
src\com\chessv3\ChessModelImpl2.java:769: error: no suitable method found for sameForwardDiagonal(int,int[])
		if(!sameForwardDiagonal(king,location))
		    ^
    method ChessModelImpl2.sameForwardDiagonal(int,int,int,int) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameForwardDiagonal(int[],int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    method ChessModelImpl2.sameForwardDiagonal(int[],int[]) is not applicable
      (actual argument int cannot be converted to int[] by method invocation conversion)
src\com\chessv3\ChessModelImpl2.java:782: error: method isBetween in class ChessModelImpl2 cannot be applied to given types;
				if(isBetween(location, king, attackerLocation))
				   ^
  required: int[],int[],int[]
  found: int[],int,int[]
  reason: actual argument int cannot be converted to int[] by method invocation conversion
src\com\chessv3\ChessModelImpl2.java:800: error: cannot find symbol
			for (in[] square : squares) {
			     ^
  symbol:   class in
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:809: error: cannot find symbol
		return board[row][col];	
		             ^
  symbol:   variable row
  location: class ChessModelImpl2
src\com\chessv3\ChessModelImpl2.java:809: error: cannot find symbol
		return board[row][col];	
		                  ^
  symbol:   variable col
  location: class ChessModelImpl2
60 errors
